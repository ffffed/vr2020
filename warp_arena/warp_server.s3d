/******************************************************************************************************************
 *                                           |WARP_SERVER.S3D|                                                    *
 *----------------------------------------------------------------------------------------------------------------*
 * This file contains the server that is the main node of the communication between players. It's IP address is   *
 * known to every client that wants to enter a game. On his initialization function, the first thing it does is   *
 * the creation of a channel by which he communicates with the clients.                                           *
 * By setting a timer at 1ms, the server then checks weather a new PDU has arrived from a player, and acts        *
 * accordingly.                                                                                                   *
 ******************************************************************************************************************/

#include <Script3d.h>
#include "warp_player.s3d"

#define SERVER_PORT				50023
#define CLIENT_PORT				50025
#define SPAWN_TIME				5000
#define MAX_PLAYERS				4
#define MAX_CONNECTION_TIMEOUT	1000

/****************************************************
 *                     |PDUs|                       *
 *--------------------------------------------------*
 *                                                  *
 * (0)CONNECTION_REQUEST: sent by a player that     *
 * wants to join a game.                            *
 *                                                  *
 * (1)CONNECTION_OK: sent by the serve once the     *
 * request is accepted.                             *
 *                                                  *
 * (2)POSITION_PDU: sent by a player once it changes*
 * his ange or his position. It is entirely sent to *
 * each other player in the game.                   *
 *                                                  *
 * (3)NEW_PLAYER: sent by the server to all players *
 * to notificate a new player has entered the arena.*
 *                                                  *
 * (4)OLD_PLAYERS: once a player has entered a game,*
 * the server informs him about the players that are*
 * already playing.                                 *
 *                                                  *
 * (5)PLAYER_EXIT: used by a player to notificate he*
 * is quitting the game.                            *
 *                                                  *
 * (6)EXIT_NOTIFICATION: used by the server to      *
 * inform all players that another one has left the *
 * game.                                            *
 *                                                  *
 * (7)CHANGE_WEAPON: sent by a client once he       *
 * changes weapon. It is sent as it is from the     *
 * server to all clients.                           *
 *                                                  *
 * (8)NEW_AMMO: a new life or ammonition box has    *
 * entered the arena!                               *
 *                                                  *
 * (9)COLLECTED_AMMO: notifies all players that the *
 * ammonition box is no more available.             *
 *                                                  *
 * (10)OLD_AMMO: passed to players when they enter  *
 * the arena. It is a vector containing all the     *
 * currently spawned boxes on the map.              *
 *                                                  *
 * (11)SHOT_PDU: notifies that a player shot a      *
 * bullet.                                          *
 *                                                  *
 * (12)BULLET_ON_WALL: notifies all players that a  *
 * bullet has hit a wall, in order to delete it.    *
 *                                                  *
 * (13)DEAD_PLAYER: notifies all players that       *
 * another one has died in order to take the proper *
 * actions.                                         *
 *                                                  *
 * (14)BULLET_ON_PERSON: when a player is hit by a  *
 * bullet, then this information must be given to   *
 * all the other players in order to let them delete*
 * the bullet.                                      *
 *                                                  *
 * (15)SERVER_BUSY: if the maximum number of players*
 * has been reached, then the connection request is *
 * discarded.                                       *
 *                                                  *
 * (16)NEW_SCORE: once a player connects to the game*
 * a new message containing his id and his score (0)*
 * is sent to everyone.                             *
 *                                                  *
 * (17)OLD_SCORES: sent by the server in order to   *
 * let new players update their score of existing   *
 * players once they connect.                       *
 *                                                  *
 * (18)KILL_SCORE: once a player dies, all the      *
 * scores must be updated, therefore the server will*
 * send the dead players id and the relative bullet *
 * in order to update correctly.                    *
 *                                                  *
 * (19) CONNECTION_ACK: sent by a client when it    *
 * successfully connects to the server. It is used  *
 * for a correct synchronization.                   *
 *                                                  *
 * (20) EXIT_ACK: sent by the server to the client. *
 * It is used to ensure a correct exit from the     *
 * game.                                            *
 ****************************************************/
#define CONNECTION_REQUEST		(0)
#define CONNECTION_OK			(1)
#define POSITION_PDU			(2)
#define NEW_PLAYER				(3)
#define OLD_PLAYERS				(4)
#define PLAYER_EXIT				(5)
#define EXIT_NOTIFICATION		(6)
#define CHANGE_WEAPON			(7)
#define NEW_AMMO				(8)
#define COLLECTED_AMMO			(9)
#define OLD_AMMO				(10)
#define SHOT_PDU				(11)
#define BULLET_ON_WALL			(12)
#define DEAD_PLAYER				(13)
#define BULLET_ON_PERSON		(14)
#define SERVER_BUSY				(15)
#define NEW_SCORE				(16)
#define OLD_SCORES				(17)
#define KILL_SCORE				(18)
#define CONNECTION_ACK			(19)
#define EXIT_ACK				(20)

var net_channel;
// PLAYER_ARRAY = [NEW_PLAYER, player_id, position, angle, current_weapon]
var players;
// PLAYER_IP = [player_id, player_ip_addr]
var players_ip;

// incremental ID to assign to a player once he requests a connection.
var id;
var address1;
var arr_supplies; //array of supplies
var posA;
var posB;
var posC;
var posD;
var posE;
var pos_arr;
var start_time;
var score_array;
var conn_ack;

function OnDownload()
{
	FileDownload("XVRResources.zip");
}

function OnInit()
{
	posA = [101, 0, 2];
	posB = [112, 0, 24];
	posC = [89, 0, 21];
	posD = [105, 0, 7];
	posE = [93, 0, 35];
	pos_arr = {posA, posB, posC, posD, posE};
	
	net_channel = NetCreateChannel(SERVER_PORT, "0.0.0.0", VR_NO_BLOCKING);
	var address1 = "................";
	
	arr_supplies = array(0);

	players = array(0);
	players_ip = array(0);
	score_array = array(0);
	id = 0;
	
	conn_ack = false;
	
	start_time = GetTime();
	
	SetTimeStep(1);
}

/****************************************************
 *                |PLAYER_SPAWN|                    *
 *--------------------------------------------------*
 * Function called once a player requests to enter  *
 * the arena. It creates a PDU that is then sent to *
 * him. It will be like:                            *
 *                                                  *
 * PDU[0] = CONNECTION_OK;                          *
 * PDU[1] = position to start the game;             *
 * PDU[2] = unique id to use;                       *
 *                                                  *
 * The position is generated randomly in a certain  *
 * area of the map.                                 *
 ****************************************************/

function player_spawn()
{
	var rand_row;
	var rand_col;
	var pdu;
	var pos;
	
	pdu = array(3);
	
	pdu[0] = CONNECTION_OK;
	id += 1;
	
	rand_row = rand(9);
	if ( (id % 2) == 0 )
		rand_row += 12;
	else
		rand_row += 179;
	rand_col = rand(9);
	rand_col += 18;
	pos = [rand_row, 0, rand_col];
	pdu[1] = pos;

	pdu[2] = id;

	return pdu;
}
//Function only used to send to clients.
function mySend(address, port, data)
{
	NetVarSendTo(address, port, data);
}

/****************************************************
 *                 |DELETE_PLAYER|                  *
 *--------------------------------------------------*
 * Creates a PDU that notifies every player that a  *
 * certaing player has left the game. It will be    *
 * like:                                            *
 *                                                  *
 * PDU[0] = EXIT_NOTIFICATION;                      *
 * PDU[1] = id of the player that leaves.           *
 ****************************************************/

function delete_player(exit_id)
{
	var exit_pdu = array(2);
	exit_pdu[0] = EXIT_NOTIFICATION;
	exit_pdu[1] = exit_id;
	
	foreach (var t in players_ip)
		mySend(t[1], CLIENT_PORT, exit_pdu);
}

/****************************************************
 *            |NOTIFICATE_NEW_AMMO|                 *
 *--------------------------------------------------*
 * Used to tell everyone that a new ammonition box  *
 * has entered the arena. The structure is:         *
 *                                                  *
 * PDU[0] = NEW_AMMO;                               *
 * PDU[1] = supply structure[type, position].       *
 ****************************************************/

function notificate_new_ammo(supply)
{
	var supply_pdu = array(2);
	supply_pdu[0] = NEW_AMMO;
	supply_pdu[1] = supply;
	
	foreach (var t in players_ip)
		mySend(t[1], CLIENT_PORT, supply_pdu);
}

/******************************************************************************************************************
 *                                            |ADDING_SUPPLY|                                                     *
 *----------------------------------------------------------------------------------------------------------------*
 * Function called whenever a new supply has to be added to the map. At first we check weather there already are  *
 * enough of them (since we only want at most 3 at a time), then we proceed to create a new one.                  *
 ******************************************************************************************************************/
function adding_supply()
{
	if (GetTime() - start_time >= SPAWN_TIME)
	{
		if (len(arr_supplies) >= 3)
			adel(arr_supplies, 0);
			
		start_time = GetTime();
		var supply = array(2);
		var k = rand(2);
		if (k == 1)
		{
			supply[0] = 1;
			var l = rand(len(pos_arr)-1);
			supply[1] = pos_arr[l];
			aadd(arr_supplies, supply);
		}
		else if (k == 2)
		{
			supply[0] = 2;
			var l = rand(len(pos_arr)-1);
			supply[1] = pos_arr[l];
			aadd(arr_supplies, supply);
		}
		else
		{
			supply[0] = 0;
			supply[1] = 0;
			aadd(arr_supplies, supply);
		}
			
		notificate_new_ammo(supply);
	}
}

/****************************************************
 *                    |OnTimer|                     *
 *--------------------------------------------------*
 * Called every 1ms, checks weather there are       *
 * messages sent by clients and acts accordingly:   *
 *                                                  *
 * CONNECTION_REQUEST: means that a client want to  *
 * access the arena. The server will therefore send *
 * a message back to him with his position, id and  *
 * angle. The it will add a new entry in the array  *
 * containing the IDs and IPs of each player, and do*
 * the same thing for the players array. Before this*
 * last instruction it will send to the new client a*
 * message with the list of all the players now in  *
 * game and their position, in order to draw them.  *
 *                                                  *
 * CHANGE_WEAPON: a player has changed his weapon,  *
 * therefore sends this information to everyone     *
 * else.                                            *
 *                                                  *
 * PLAYER_EXIT: a player left the game, therefore   *
 * he is deleted from all the lists and the message *
 * is sent to all other players, in order to update *
 * their own structure.                             *
 *                                                  *
 * POSITION_PDU: a player has modified his position *
 * from the last time it was checked. We must give  *
 * this information to everyone.                    *
 *                                                  *
 * COLLECTED_AMMO: a player has collected an ammo   *
 * box from the arena. We must nofiticate everyone  *
 * so they delete it.                               *
 *                                                  *
 * SHOT_PDU: a player has shot a bullet. We must    *
 * give this information to everyone.               *
 *                                                  *
 * BULLET_ON_WALL: a bullet has hit a wall. The     *
 * check is done on client side, and he notificates *
 * the server, in order to let everyone else know.  *
 ****************************************************/

function OnTimer()
{
	var curr_time = GetTime();
	var received_data = NetVarReceiveFrom(net_channel, &address1);
	var player;
	var ack;
	var new_ip;
	var exit_id;
	var exit_pdu;
	//var connection_time; //time at which the server received a connection request pdu
	
	if (received_data != null)
	{
		var connection_time;
		switch (received_data[0])
		{
			case CONNECTION_REQUEST :
				connection_time = getTime();
				if (len(players) >= MAX_PLAYERS)
				{
					var refused_pdu = array(1);
					refused_pdu[0] = SERVER_BUSY;
					mySend(address1, CLIENT_PORT, refused_pdu);
				}
				else
				{
					connection_time = getTime();
					ack = player_spawn();
					mySend(address1, CLIENT_PORT, ack);
					
					do
					{
						received_data = NetVarReceiveFrom(net_channel, &address1);
						if (received_data != null && received_data[0] == CONNECTION_ACK)
							conn_ack = true;
					} while (conn_ack == true || (getTime() - connection_time) > MAX_CONNECTION_TIMEOUT);
					
					if (conn_ack == true)
					{
						var msg = "SERVER: A new player entered the arena in position: ";
						var msg2 = ", and with id ";
						trace(msg);
						var p_pos = ack[1];
						var p_id = ack[2];
						trace(msg, p_pos, msg2, p_id);
	
						new_ip = array(2);
						new_ip[0] = ack[2];
						new_ip[1] = address1;
						aadd(players_ip, new_ip);	
	
						//sending to the new player the list of the exsisting players
						if (len(players) > 0)
						{
							var old_players_arr = array(2);
							old_players_arr[0] = OLD_PLAYERS;
							old_players_arr[1] = players;
							mySend(address1, CLIENT_PORT, old_players_arr);
						}
					
						//sending to the new player the ammo boxes already deployed
						if (len(arr_supplies) > 0)
						{
							var old_arr_supply = array(2);
							old_arr_supply[0] = OLD_AMMO;
							old_arr_supply[1] = arr_supplies;
							mySend(address1, CLIENT_PORT, old_arr_supply);
						}
						
						var nsc = array(2);
						nsc[0] = id;
						nsc[1] = 0;
						aadd(score_array, nsc);
						
						var new_sc = array(2);
						new_sc[0] = OLD_SCORES;
						new_sc[1] = score_array;
						mySend(address1, CLIENT_PORT, new_sc);
				
						player = array(5);
						player[0] = NEW_PLAYER;
						player[1] = ack[2];
						player[2] = ack[1];
						player[3] = 0; //angle
						player[4] = 0; //starting weapon
						aadd(players, player);
				
						foreach (var t in players_ip)
							if (ack[2] != t[0])
								mySend(t[1], CLIENT_PORT, player);
								
						var nsc2 = array(3);
						nsc2[0] = NEW_SCORE;
						nsc2[1] = id;
						nsc2[2] = 0;	
						
						foreach (var t in players_ip)
							if (ack[2] != t[0])
								mySend(t[1], CLIENT_PORT, nsc2);
					}
					else
						id--;			
				}
				break;
				
			case CHANGE_WEAPON :
				for (var t = 0; t < len(players); t++)
					if (received_data[1] == players[t][1])
							players[t][4] = received_data[2];
				foreach (var t in players_ip)
					if (received_data[1] != t[0])
						mySend(t[1], CLIENT_PORT, received_data);
				break;

			case PLAYER_EXIT :
				exit_id = received_data[1];
				for (var t = 0; t < len(players); t++)
				{
					if (players[t][1] == exit_id)
					{
						adel(players, t);
						
						exit_pdu = array(1);
						exit_pdu[0] = EXIT_ACK;
						mySend(players_ip[t][1], CLIENT_PORT, exit_pdu);
						
						adel(players_ip, t);
						delete_player(exit_id);
					}
				}
				for (var t = 0; t < len(score_array); t++)
				{
					if (score_array[t][0] == exit_id)
						adel(score_array, t);
				}
				break;
			
			case POSITION_PDU :
				foreach (var t in players_ip)
					if (received_data[3] != t[0])
						mySend(t[1], CLIENT_PORT, received_data);
				break;
			
			case COLLECTED_AMMO :
				adel(arr_supplies, received_data[2]);
				foreach (var t in players_ip)
					if (received_data[1] != t[0])
						mySend(t[1], CLIENT_PORT, received_data);
				break;
						
			case SHOT_PDU :
				foreach (var t in players_ip)
					if (received_data[1] != t[0])
						mySend(t[1], CLIENT_PORT, received_data);
				break;
			
			case BULLET_ON_WALL :
				foreach (var t in players_ip)
					if (received_data[1] != t[0])
						mySend(t[1], CLIENT_PORT, received_data);
				break;	
				
			case DEAD_PLAYER :
				foreach (var t in players_ip)
					if (received_data[1] != t[0])
						mySend(t[1], CLIENT_PORT, received_data);
				
				for (var t = 0; t < len(players); t++)
					if (players[t][1] == received_data[1])
						{
							adel(players, t);
							
							exit_pdu = array(1);
							exit_pdu[0] = EXIT_ACK;
							mySend(players_ip[t][1], CLIENT_PORT, exit_pdu);
							
							adel(players_ip, t);
						}
				for (var t = 0; t < len(score_array); t++)
				{
					if (score_array[t][0] == received_data[1])
						adel(score_array, t);
				}
				break;	
				
			case BULLET_ON_PERSON :
				foreach (var t in players_ip)
						mySend(t[1], CLIENT_PORT, received_data);
				break;
				
			case KILL_SCORE :
				foreach (var t in players_ip)
						mySend(t[1], CLIENT_PORT, received_data);
				break;
			
			default :
		}
	}
	adding_supply();
}

function OnFrame()
{
	
}

function OnEvent()
{
	
}

function OnError()
{
	
}

function OnExit()
{
	
}
function DownloadReady()
{
	
}