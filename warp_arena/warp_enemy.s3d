/******************************************************************************************************************
 *                                            |WARP_ENEMY.S3D|                                                    *
 *----------------------------------------------------------------------------------------------------------------*
 * This is the enemy class. In order to implement multiplayer online games, each client will see each other player*
 * as an enemy. This class is nothing more that a lighter and less featured WARP_PLAYER class. The main use of    *
 * it is to draw in a correct and reliable way the enemies once they connect to the map (or the ones that were    *
 * already there when the client entered). It also makes them switch their weapons, move their frames and shoot.  *
 * Once the player is disconnected or dies, it is removed from the list of enemies and will not be drawn.         *
 ******************************************************************************************************************/

//Frames used for the player movement
#define ENEMY_START_WALK	16
#define ENEMY_END_WALK		48

class enemy
{
	//mesh related variables
	var upper_mesh;
	var lower_mesh;
	var weapon_mesh;
	var weapon_mesh0;
	var weapon_mesh1;
	var weapon_mesh2;
	
	//object related variables
	var lower_obj;
	var upper_obj;
	var weapon_obj;
	var obj;
	
	var position; //current position of the player on the map
	var oldposition;
	var angle; //direction in which the player has to move in

	var step; //players speed
	var frame_step; 
	var current_frame; //last frame showed
	var run; //set to 2 from pressing shift key to run
	
	var curr_weapon;
	var shoot_fx;
	var step_fx;
	var id; //unique id given by the server
	
	init(init_pos, init_angle, init_id);
	draw_enemy();
	switch_weapon(w);
};

function enemy::init(init_pos, init_angle, init_id)
{
	position = init_pos;
	angle = init_angle;
	id = init_id;
	step = 0.1;
	frame_step = 1.0;
	current_frame = ENEMY_START_WALK;
	run = 1;
	shoot_fx = CVmVRAWAV("shoot.wav");
	step_fx  = CVmVRAWAV("step.wav");
	curr_weapon = 0;
	
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf1 = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf1);
	weapon_mesh0 = CVMNewMesh("rocketl.aam");
	weapon_mesh0.scale(sf1);
	weapon_mesh1 = CVMNewMesh("railgun.aam");
	weapon_mesh1.scale(sf1);
	//weapon mesh for portal gun! - NOT USED IN THIS GAME -
	weapon_mesh2 = CVMNewMesh("rocketl.aam");
	weapon_mesh2.scale(sf1);
	weapon_mesh2.ModulateMaterials(0, 0, 1, 1);
	
	lower_obj = CVmObj(lower_mesh);
	upper_obj = CVmObj(upper_mesh);
	weapon_obj = CVmObj(weapon_mesh0);
	
	obj = CVmObj();
	obj.addchild(upper_obj);
	obj.addchild(lower_obj);
	obj.addchild(weapon_obj);
  
	obj.ModulateMaterials([1, 1, 1]);
	
	obj.setPosition(position);
	obj.setRotation(angle*180/pi);
	current_frame = ENEMY_START_WALK;
}

function enemy::draw_enemy()
{
	obj.draw(VR_FRAME_NUMBER, current_frame);
}
/************************|SWITCH_WEAPON|********************************
 *                                                                     *
 * This function lets the enemies switch weapon. It is called once the *
 * server tells me that a specified enemy changed his active weapon,   *
 * and therefore I must change the relative mesh.                      *
 ***********************************************************************/
function enemy::switch_weapon(w)
{
	switch (w)
	{
		case 0 :
			obj.RemoveChild(weapon_obj);
			weapon_obj = CVmObj(weapon_mesh0);
			obj.addchild(weapon_obj);
			curr_weapon = 0;
			break;
			
		case 1 :
			obj.RemoveChild(weapon_obj);
			weapon_obj = CVmObj(weapon_mesh1);
			obj.addchild(weapon_obj);
			curr_weapon = 1;
			break;
		//portal gun mesh - NOT USED IN THIS GAME -
		case 2 :
			obj.RemoveChild(weapon_obj);
			weapon_obj = CVmObj(weapon_mesh2);
			obj.addchild(weapon_obj);
			curr_weapon = 2;
			break;
			
		default : 
	}
}