/******************************************************************************************************************
 *                                           |WARP_LEVEL.S3D|                                                     *
 *----------------------------------------------------------------------------------------------------------------*
 * This file includes the class that is called in order to setup the level infrastructure of the game. The base	  *
 * map is found in the level.txt file taht can be found in the XVRResources.zip file. Each structure that can be  *
 * found in the game has a different character in the .txt map, meaning that we iterate on the rows and columns   *
 * and create dynamically (but only once) each object.                                                            *
 ******************************************************************************************************************/
 
var obstacle_array;

class level
{
	var wall_mesh;
	var wall1_mesh;
	var box_mesh;
	var floor_mesh;
	var sky_mesh;
	
	var wall_obj_array;
	var wall1_obj_array;
	var box_obj_array;

	var wall_material;
	var wall1_material;
	var box_material;
	var floor_material;
	var sky_material;
	
	var wall_texture;
	var wall1_texture;
	var box_texture;
	var floor_texture;
	var sky_texture;
	
	var num_rows;
	var num_columns;

	init(level_textfile);
	draw();		
};


function level::init(level_textfile)
{
	wall_texture = CVmTexture("p_wall_1.png");
	wall_material = CVmMaterial();
	wall_material.SetTexture(wall_texture);
	wall_material.ChangeTextureParams(VR_V_TILING, 3);
	
	wall1_texture = CVmTexture("outer_wall.png");
	wall1_material = CVmMaterial();
	wall1_material.SetTexture(wall1_texture);
	wall1_material.ChangeTextureParams(VR_V_TILING, 3);
	
	box_texture = CVmTexture("cube2.png");
	box_material = CVmMaterial();
	box_material.SetTexture(box_texture);
	box_material.ChangeTextureParams(VR_V_TILING, 1);
	
	wall_obj_array = array(0);
	wall_mesh = CVmNewMesh(VRP_BOX);
	wall_mesh.SetMaterial(wall_material);
	wall_mesh.Scale(1, 5, 1);
	
	wall1_obj_array = array(0);
	wall1_mesh = CVmNewMesh(VRP_BOX);
	wall1_mesh.SetMaterial(wall1_material);
	wall1_mesh.Scale(1, 5, 1);
	
	box_obj_array = array(0);
	box_mesh = CVmNewMesh(VRP_BOX);
	box_mesh.SetMaterial(box_material);
	box_mesh.Scale(1, 1, 1);
	var f = LoadFile(level_textfile);
	num_rows = len(f); // z
	num_columns = len(f[0]); // x
	level_matrix = array(num_rows);
	trace(num_rows,num_columns);
	//map creation based on the characters found on the level.txt file.
	var t;
	var r;
	
	for(var i = 0; i < num_rows; i++)
	{
		level_matrix[i] = array(num_columns);
		
		for(var j = 0; j < num_columns; j++)
		{
			//inner walls
			switch (f[i][j])
			{
			case "*" :
				level_matrix[i][j] = 5;
				t = CVmObj(wall_mesh);
				t.SetPosition(j,0,i);
				aadd(wall_obj_array,t);
				aadd(obstacle_array, t);
				break;
			//outer walls
			case "#" :
				level_matrix[i][j] = 5;
				t = CVmObj(wall1_mesh);
				t.SetPosition(j,0,i);
				aadd(wall1_obj_array,t);
				aadd(obstacle_array, t);
				break;
			//heart box
			case "@" :
				level_matrix[i][j] = 1;
				t = CVmObj(box_mesh);
				t.SetPosition(j,0,i);
				aadd(box_obj_array,t);
				aadd(obstacle_array, t);
				break;
			//two cases one on top the other
			case "+" :
				level_matrix[i][j] = 2;
				t = CVmObj(box_mesh);
				r = CVmObj(box_mesh);
				t.SetPosition(j,0,i);
				r.SetPosition(j,1,i);
				aadd(box_obj_array,t);
				aadd(obstacle_array,t);
				aadd(box_obj_array,r);
				aadd(obstacle_array,r);
				break;
			
			default :			
				level_matrix[i][j] = 0;
			}
		}
	}

	floor_material = CVmMaterial();
	floor_texture  = CVMtexture("floor2.png");
	floor_material.SetTexture(floor_texture);
	floor_material.ChangeTextureParams(VR_U_TILING,60);
	floor_material.ChangeTextureParams(VR_V_TILING,30);
	
	sky_material = CVmMaterial();
	sky_texture = CVMtexture("floor2.png");
	sky_material.SetTexture(sky_texture);
	sky_material.ChangeTextureParams(VR_U_TILING,60);
	sky_material.ChangeTextureParams(VR_V_TILING,30);
	
	floor_mesh = CVmNewMesh(VRP_BOX);
	sky_mesh = CVmNewMesh(VRP_BOX);
	sky_mesh.scale(num_columns,1,num_rows);
	floor_mesh.scale(num_columns,1,num_rows);
	floor_mesh.translate(0,-1,0);
	sky_mesh.translate(0,4,0);
	floor_mesh.SetMaterial(floor_material);
	sky_mesh.SetMaterial(sky_material);
}


function level::draw()
{
	foreach (var t in wall_obj_array)
		t.Draw();
	foreach (var t in wall1_obj_array)
		t.Draw();
	foreach (var t in box_obj_array)
		t.Draw();
	floor_mesh.draw();
	sky_mesh.draw();
}
