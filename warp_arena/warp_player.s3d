/******************************************************************************************************************
 *                                           |WARP_PLAYER.S3D|                                                    *
 *----------------------------------------------------------------------------------------------------------------*
 * This file includes the player class that creates the player and the other structures necessary for the game.   *
 * It initially creates the player and sets his position on the map, initializing also his parameters such as     *
 * his speed and more. Here we also find the interactive keys that a player can use to move his avatar around the *
 * arena. On top of that it is here that we find our collision detection algorithm for walls.                     *
 ******************************************************************************************************************/

#include "warp_bullet.s3d"
#include "warp_status.s3d"

//Frames used for the players movement
#define SWAT_START_WALK		16
#define SWAT_END_WALK		48
//distance between the player and camera
#define distance	2
#define altitude	1.7

var level_matrix;
//position of the camera
var CamPos;
//Placeholder variables for the players position
var i;
var J;
var i_new;
var j_new; 

class player
{
	//mesh related variables
	var upper_mesh;
	var lower_mesh;
	var weapon_mesh;
	var weapon_mesh0;
	var weapon_mesh1;
	var weapon_mesh2;
	var portal_txt;
	var portal_mtr;
	var portal_mesh;
	
	
	//object related variables
	var lower_obj;
	var upper_obj;
	var weapon_obj;
	var portal1_obj;
	var portal2_obj;
	var obj;
	
	//class initialization variables
	var myCamera;
	var my_bullet;
	var mystatus;
	
	//camera related variables
	var oldCamPos;
	var fp_cam; //to 0 when the third person camera goes inside a wall
	var cam_x;
	var cam_z;
	var cam_inside;
	var campos1;
	
	//
	var view; // [1 = third person] - [0 = first person]
	var position; //current position of the player on the map
	var oldposition;
	var pos_l; //position of the object directly to the players left
	var pos_r; //position of the object directly to the players right
	var pos_ol; //position of the object in the front (or in the back) left diagonal
	var pos_or; //position of the object in the front (or in the back) right diagonal
	var direction; //direction in which the player has to move in
	var direction_left;
	var step; //players speed
	var frame_step;
	var current_frame;
	var run; //set to 2 from pressing shift key to run
	var portal1;
	var portal2;
	//flags and other variables
	var angle; //initial players direction
	var leftang;
	var bullet_array;
	var shot_cnt;
	var has_shot;
	var teleport_cnt;
	var has_teleported;
	var color;
	var j_up;
	var j_down;
	var j_count;
	var J_finalPos;
	var curr_weapon;
	var start_time;
	var shoot_fx;
	var step_fx;
	var id; //unique id given by the server
	var shot_flag; //used from client to check if a bullet has been shot
	var bullet_id;
	var cylinder;
	var cylinder_mesh;

	init(col, my_id);
	draw();
	setposition(pos);
	setrotation(angle);
	update();
	collision_check(fl, ang); //checks for collision
	finding_orientation(pos);
	warp_check();
};

function player::init(col, my_id)
{
	bullet_array = array(0);
	shot_cnt = 0;
	teleport_cnt = 0;
	has_shot = false;
	has_teleported = false;
	angle = 0;
	view = 1;
	fp_cam = 1;
	cam_x = 0;
	cam_z = 0;
	cam_inside = 0;
	campos1 = 0;
	color = col;
	j_up = 0;
	j_down = 0;
	j_count = 0;
	curr_weapon = 0;
	id = my_id;
	leftang = angle + pi/2;
	shot_flag = 0;
	bullet_id = 0;
  
  	
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf1 = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf1);
	weapon_mesh0 = CVMNewMesh("rocketl.aam");
	weapon_mesh0.scale(sf1);
	weapon_mesh1 = CVMNewMesh("railgun.aam");
	weapon_mesh1.scale(sf1);
	weapon_mesh2 = CVMNewMesh("rocketl.aam");
	weapon_mesh2.scale(sf1);
	weapon_mesh2.ModulateMaterials(0, 0, 1, 1);
	cylinder_mesh = CVMNewMesh(VRP_CYLINDER);
  	cylinder_mesh.scale(0.8, 1.4, 0.8);
	cylinder_mesh.ModulateMaterials(0, 0, 0, 0);
	portal_txt = CVmTexture("metalwall1.png");
	portal_mtr = CVmMaterial();
	portal_mtr.SetTexture(portal_txt);
	portal_mtr.ChangeTextureParams(VR_V_TILING, 1);
	portal_mesh = CVMNewMesh(VRP_CYLINDER);
	portal_mesh.SetMaterial(portal_mtr);
	portal_mesh.scale(2, 0.05, 2);
	
	lower_obj = CVmObj(lower_mesh);
	upper_obj = CVmObj(upper_mesh);
	weapon_obj = CVmObj(weapon_mesh0);
	portal1_obj = CVmObj(portal_mesh);
	portal2_obj = CVmObj(portal_mesh);
	cylinder = CVmObj(cylinder_mesh);
	
	
	obj = CVmObj();
	obj.addchild(upper_obj);
	obj.addchild(lower_obj);
	obj.addchild(weapon_obj);
	
	mystatus = status();
	mystatus.init();
	mystatus.myWeapon = weapon();
	mystatus.myWeapon.init();
  
	obj.ModulateMaterials(color);
  
	angle = 0;
	// z è avanti
	// x è di lato
	direction = [0, 0, 1];
	pos_l = [0, 0, 0];
	pos_r = [0, 0, 0];
	step = 0.15;
	frame_step = 1.0;
	current_frame = SWAT_START_WALK;
	run = 1;
	portal1 = 0; // Hit 
	portal2 = 0;
  
	shoot_fx = CVmVRAWAV("shoot.wav");
	step_fx  = CVmVRAWAV("step.wav");
}

/******************************************************************************************************************
 *                                           |PLAYER MOVEMENT|                                                    *
 *----------------------------------------------------------------------------------------------------------------*
 * The following code is realized in order to let the plaer move in the map. The keyboard is used as main method  *
 * of movement. The involved keys and their meaning are defined as follows:                                       *
 *                                                                                                                *
 *     -> Shift: used as toggle, keep pressed to run;                                                             *
 *     -> A: used to turn the avatar to his left. This key changes only the angle, it does not let him move;      *
 *     -> D: used to turn the avatar to his right. This key changes only the angle, it does not let him move;     *
 *     -> Space Bar: lets the avatar jump. This can be also used to climb on objects that have y coordinate that  *
 *               is less that the maximum height of the jump;                                                     *
 *     -> W: used to make the avatar walk forward;                                                                *
 *     -> S: used to make the avatar walk backwards;                                                              *
 *     -> R: positions the camera in first person view;                                                           *
 *     -> F: positions the camera in third person view;                                                           *
 *     -> I: shoots with the currently equipped weapon;                                                           *	
 *     -> J: toggles the normal gun as active weapon;                                                             *
 *     -> K: toggles the rocket laucher as active weapon;                                                         *
 *     -> N/M: Lets a player create a portal on the position he is standing on!                                   *
 *     -> L: Once a player finds himself to be on a portal, by using this command he will be TELEPORTED to the    *
 *               other one!                                                                                       *
 *     -> Q: lets the player move laterally to his left, without changing his vieweing angle. It can be combined  *
 *               with the W key to move both forward and left;                                                    *
 *     -> E: lets the player move laterally to his right, without changing his vieweing angle. It can be combined *
 *               with the W key to move both forward and right;                                                   *
 ******************************************************************************************************************/
function player::update()
{   
	oldposition = position;
	oldCamPos = CamPos;
	
	for(var k = 0; k < len(bullet_array); k++)
		bullet_array[k].update();
     
	// Run
	if (keypressed(VK_SHIFT))
		run = 2;
	else
		run = 1;
  
	// Turn left
	if (keypressed("A"))
	{
		if (!keypressed(VK_CONTROL))
			angle += 0.04;
	}
	// Turn right  
	else if (keypressed("D"))
		if (!keypressed(VK_CONTROL))
    		angle -= 0.04;
    
	// Players direction
	leftang = angle+(PI/2); 
	direction = [sin(angle), 0, cos(angle)];
	direction_left = [sin(leftang), 0, cos(leftang)];
  
	// Jump
	if (keypressed(VK_SPACE))
	{
		if (j_up == 0 && j_down == 0)
		{
		j_up = 1;
		j_count = 0;
		}
	}
	if (j_up == 1)
	{
		position.y +=  0.1;
		j_count += 0.1;
		if (j_count >= 1.5)
		{
			j_up = 0;
			j_down = 1;
		}
	}
	else if (j_down == 1)
	{
		i = int(position.z);
		j = int(position.x);
		j_finalPos = level_matrix[i][j];
		// Se la posizione finale è più bassa della posizione in cui devo stare
		// allora devo piallare tutto alla posizione finale.
		if (position.y <= j_finalPos  && (j_finalPos - position.y <= 1))
		{
			j_down = 0;
			position.y = j_finalPos;
			j_count = 0;
		}
		else 
		{
			// Devo stare attento che non vada in negativo.
			// I controlli non sono mai troppi, mannaggia la madonna
			position.y -= 0.1;
			oldposition.y -= 0.1;
			if (position.y < 0)
			position.y = j_finalPos;
		}
	}
	// Forward walk
	if (keypressed("W"))
	{  
		i = int(position.z);
		j = int(position.x);
		position += (direction*step*run);
		i_new = int(position.z);
		j_new = int(position.x);
		// Se vado verso una zona più bassa, allora devo scendere
		if (level_matrix[i_new][j_new] < level_matrix[i][j])
		j_down = 1;
      
		CamPos += (direction*step*run);
		current_frame += frame_step;
		if (current_frame > SWAT_END_WALK)
		{
			step_fx.play();
			current_frame = SWAT_START_WALK;
		}
		
		collision_check(1, angle);
	}

	// Backwards Walk
	else if (keypressed("S"))
	{  
		i = int(position.z);
		j = int(position.x);
		position -= (direction*step*run);
		i_new = int(position.z);
		j_new = int(position.x);
		// Se vado verso una zona più bassa, allora devo scendere
		if (level_matrix[i_new][j_new] < level_matrix[i][j])
		{
			j_down = 1;
		}
		CamPos -= (direction*step*run);
		current_frame -= frame_step;
		if (current_frame < SWAT_START_WALK)
		{
			current_frame = SWAT_END_WALK;
		}

		collision_check(0, angle);
	}
	
	if (keypressed("Q"))
	{  
		i = int(position.z);
		j = int(position.x);
		position += (direction_left*step*run);
		i_new = int(position.z);
		j_new = int(position.x);
		// Se vado verso una zona più bassa, allora devo scendere
		if (level_matrix[i_new][j_new] < level_matrix[i][j])
		j_down = 1;
      
		CamPos += (direction_left*step*run);
		current_frame += frame_step;
		if (current_frame > SWAT_END_WALK)
		{
			step_fx.play();
			current_frame = SWAT_START_WALK;
		}
    
		collision_check(1, leftang);
	}

	// Backwards Walk
	else if (keypressed("E"))
	{  
		i = int(position.z);
		j = int(position.x);
		position -= (direction_left*step*run);
		i_new = int(position.z);
		j_new = int(position.x);
		// Se vado verso una zona più bassa, allora devo scendere
		if (level_matrix[i_new][j_new] < level_matrix[i][j])
			j_down = 1;
		CamPos -= (direction_left*step*run);
		current_frame += frame_step;
		if (current_frame < SWAT_START_WALK)
		{
			step_fx.play();
			current_frame = SWAT_END_WALK;
		}
	
		collision_check(0, leftang);
	}
	
	// R for first person, F to go back to third person
	if (keypressed("R"))
		view = 0;

	if (keypressed("F"))
		view = 1;
      
	/*
	* Per lo sparo bisogna creare un array di istanze, una per ogni bullet.
	* Per ogni proiettile, bisogna tenerne traccia, mediante l'istanza dell'oggetto che gli compete.
	*/
	if (keypressed("I"))
	{
		if (!has_shot) 
		{
			var check = mystatus.myWeapon.update(curr_weapon);
			if (check == true)
			{
				bullet_id += 1;
				shot_flag = 1;
				my_bullet = bullet();
				my_bullet.init(position, direction, level_matrix, curr_weapon, bullet_id);
				aadd(bullet_array, my_bullet);
				shoot_fx.play();
				has_shot = true;
			}
		}
	} 
	//toggles the normal pistol.
	if (keypressed("J"))
	{ 
		obj.RemoveChild(weapon_obj);
		weapon_obj = CVmObj(weapon_mesh0);
		obj.addchild(weapon_obj);
		curr_weapon = 0;
		mystatus.myWeapon.swap(curr_weapon);
	}
	//toggles the railgun
	if (keypressed("K"))
	{ 
		obj.RemoveChild(weapon_obj);
		weapon_obj = CVmObj(weapon_mesh1);
		obj.addchild(weapon_obj);
		curr_weapon = 1;
		mystatus.myWeapon.swap(curr_weapon);
	}
	//creates one of the two possible portals, if one already exists, it replaces it.
	if (keypressed ("M"))
	{
		portal1_obj.setposition(oldposition);
		portal1 = 1;
	}
	//creates the other one of the two possible portals, if one already exists, it replaces it.
	if (keypressed ("N"))
	{
		portal2_obj.setposition(oldposition);
	  	portal2 = 1;
	}
	
	//if 2 portals are on the map, and the player is standing on one of them,
	//it teleports him to the other one.
	if (keypressed ("L"))
	{
		if(!has_teleported)
		{
			warp_check();	
			has_teleported = true;
		}
	}
	
	setrotation(angle);
	setposition(position);
	CameraGetCurrent().SetPosition(CamPos);

	//updates camera focal point
	CameraGetCurrent().SetTarget(position.x+sin(angle)*(distance+3), 
		position.y+(1-view)*0.9, position.z+cos(angle)*(distance+3));
}

/******************************************************************************************************************
 *                                                  |DRAW|                                                        *
 *----------------------------------------------------------------------------------------------------------------*
 * Here we draw the players avatar on the map. At first we animate depending on the view since we have chose not  *
 * to show the players mesh when in first person (se we don't look at the world from "inside" his body), and then *
 * check weather a bullet he had shot has collided with a wall. In that case we simply delete the object. At last *
 * we check weather the updated position of the avatar coincides with one of the ammo or life power-ups that can  *
 * be found on the map. In that case we simply remove the element from the respective list.                       *
 ******************************************************************************************************************/
function player::draw()
{
	if (view == 1)
		obj.draw(VR_FRAMENUMBER, current_frame);
	else
		obj.draw(VR_FRAMENUMBER, 1);
	cylinder.draw();
	
	for(var k = 0; k < len(bullet_array); k++)
			bullet_array[k].draw_bullet();
	
	if (portal1 == 1)
		portal1_obj.draw();
	    
	    
	if (portal2 == 1)
		portal2_obj.draw();
}

function player::setposition(pos)
{
	position = pos;
	obj.setposition(position); //sets players position
	cylinder.setposition(position);
	pos_l = position;
	pos_r = position;
	pos_ol = position;
	pos_or = position;
}

function player::setrotation(angle)
{
	obj.setrotation(angle*180.0/PI, 0, 1, 0);
	//rotates camera(depending also on the view)
  
	//questo è il calcolo normale, se non ho problemi di visuale in terza persona.
	if (fp_cam == 1)
		CamPos = [position.x+sin(-angle)*distance*view+(1-view)*sin(-angle)*0.3, 
			position.y+altitude-(1-view)*0.3, position.z-distance*cos(angle)*view-(1-view)*cos(angle)*0.3];
	else
	{
		//This is the normal camera position calculator, based on the view
		CamPos = [position.x+sin(-angle)*distance*view+(1-view)*sin(-angle)*0.3, 
			position.y+altitude-(1-view)*0.3, position.z-distance*cos(angle)*view-(1-view)*cos(angle)*0.3];
		//We compute the third person camera position even if we are in first person.
		//This because we want to check if we are not in a wall anymore.
		CamPos1 = [position.x+sin(-angle)*distance*(1-view)+view*sin(-angle)*0.5, 
			position.y+altitude-view*0.5, position.z-distance*cos(angle)*(1-view)-view*cos(angle)*0.5];
		cam_z = ( int(CamPos1.z) > 0) ? int(CamPos1.z) : 0;
		cam_x = ( int(CamPos1.x) > 0) ? int(CamPos1.x) : 0;
		
		//Here we go back to the normal third person camera if we find it in a suitable position
		var cam_not_inside = level_matrix[cam_z][cam_x];
		if (cam_not_inside < CamPos1.y)
		{
			fp_cam = 1;
			view = 1;
		}
	}
	//Now we'll check weather the camera is in a wall 
	cam_z = int(CamPos.z);
	cam_x = int(CamPos.x);
	var cam_inside = level_matrix[cam_z][cam_x];
  
	//If we are in third person and the camera finds itself being in a wall, then we must
	//change it to be in first person.
	if ((cam_inside > CamPos.y) && (view == 1)){
	fp_cam = 0;
	view = 0;
	}
}
/******************************************************************************************************************
 *                                        |COLLISION DETECTION|                                                   *
 *----------------------------------------------------------------------------------------------------------------*
 * This function was created in order to implement a more efficient collision detection algorithm in warp arena.  * 
 * Our algorithm does not revolve around the use of the bounding box function that can be found in XVR.			  *
 * Every time a player moves his position, we check different directions: the one in front, the ones on the left  *
 * and on the right, and the diagonal ones (front-left and front-right). If we collide only in front, we do       *
 * nothing and keep the old position. If we collide in another direction, we restore only the corresponding       *
 * component to the one he is not moving in. This was done in order to achieve a sliding effect during gameplay.  *
 ******************************************************************************************************************/
function player::collision_check(fl, ang)
{
	var i_ol;
	var i_or;
	var j_ol;
	var j_or;
	var a = ang + (pi/2); //left hand of the avatar
	var b = ang + (pi/4); //front left hand of the avatar
	var c = ang - (pi/4); //front right hand of the avatar
	var d = ang + (3*pi/4); //back left hand of the avatar
	var e = ang - (3*pi/4); //back right hand of the avatar
   
	var dirfront = [sin(ang), 0, cos(ang)]; // Posizione verso il quale mi muovo
	var dirleft = [sin(a), 0, cos(a)];
	var diroblique_l = [sin(b), 0, cos(b)];
	var diroblique_r = [sin(c), 0, cos(c)];
	var diroblique_bl = [sin(d), 0, cos(d)];
	var diroblique_br = [sin(e), 0, cos(e)];
	// Collision detection has to also check beside the avatar
	pos_l += (dirleft * step * run);
	pos_r -= (dirleft * step * run);
	if (fl == 1)
	{
		pos_ol += (diroblique_l * step * run);
		pos_or += (diroblique_r * step * run);
		i = ( int(position.z + dirfront.z) > 0) ? int(position.z + dirfront.z) : 0;
		j = ( int(position.x + dirfront.x) > 0) ? int(position.x + dirfront.x) : 0;
	}
	else
	{
		pos_ol += (diroblique_bl * step * run);
		pos_or += (diroblique_br * step * run);
		i = ( int(position.z - dirfront.z) > 0 ) ? int(position.z - dirfront.z) : 0;
		j = ( int(position.x - dirfront.x) > 0 ) ? int(position.x - dirfront.x) : 0;
	}

	var i_l = (floor(pos_l.z + dirleft.z) < 0) ? 0 : floor(pos_l.z + dirleft.z); 
	var j_l = (floor(pos_l.x + dirleft.x) < 0) ? 0 : floor(pos_l.x + dirleft.x); 
	var i_r = (floor(pos_r.z - dirleft.z) < 0) ? 0 : floor(pos_r.z - dirleft.z); 
	var j_r = (floor(pos_r.x - dirleft.x) < 0) ? 0 : floor(pos_r.x - dirleft.x);
    
	if (fl == 1)
	{
		i_ol = (floor(pos_ol.z + diroblique_l.z) < 0) ? 0 : floor(pos_ol.z + diroblique_l.z); 
		j_ol = (floor(pos_ol.x + diroblique_l.x) < 0) ? 0 : floor(pos_ol.x + diroblique_l.x); 
		i_or = (floor(pos_or.z + diroblique_r.z) < 0) ? 0 : floor(pos_or.z + diroblique_r.z); 
		j_or = (floor(pos_or.x + diroblique_r.x) < 0) ? 0 : floor(pos_or.x + diroblique_r.x);
	}
	else
	{
		i_ol = (floor(pos_ol.z + diroblique_bl.z) < 0) ? 0 : floor(pos_ol.z + diroblique_bl.z); 
		j_ol = (floor(pos_ol.x + diroblique_bl.x) < 0) ? 0 : floor(pos_ol.x + diroblique_bl.x); 
		i_or = (floor(pos_or.z + diroblique_br.z) < 0) ? 0 : floor(pos_or.z + diroblique_br.z); 
		j_or = (floor(pos_or.x + diroblique_br.x) < 0) ? 0 : floor(pos_or.x + diroblique_br.x);
	}
	var i_old = int(oldposition.z); 
	var j_old = int(oldposition.x);
    
	var inside = level_matrix[i][j];
	var inside_l = level_matrix[i_l][j_l];
	var inside_r = level_matrix[i_r][j_r];
	var inside_ol = level_matrix[i_ol][j_ol];
	var inside_or = level_matrix[i_or][j_or];

	/* Muro a sinistra */
	if ( (inside_l > (0.5 + position.y)) && (inside_ol > (0.5 + position.y)) )
	{  
		if ( (i_l == i_ol) && (j != j_old))
      {
			// Non fare nulla se dirleft di x e z hanno segni discordi
			position.z = oldposition.z;
			CamPos.z = oldCampos.z;
      }
      else if (j_l == j_ol)
      {
			// Non fare nulla se dirleft di x e z hanno segni concordi
			position.x = oldposition.x;
			CamPos.x = oldCampos.x;
      }
    }
	/*Muro a destra */
	if ( (inside_r > (0.5 + position.y)) && (inside_or > (0.5 + position.y)) )
	{  // Non fare nulla se sono concordi (dirleft x e z)
		if ( (i_r == i_or) && (i == i_old) )
      {
			position.z = oldposition.z;
			CamPos.z = oldCampos.z;
      }
      else if (j_r == j_or)
      {
			// Non fare nulla se sono discordi (dirleft x e z)
			position.x = oldposition.x;
			CamPos.x = oldCampos.x;
      }
	}
	if (inside > (0.5 + position.y) )
	{
		position.x = oldposition.x;
		position.z = oldposition.z;
		CamPos.x = oldCamPos.x;
		CamPos.z = oldCamPos.z;
	}
}

/* Attualmente non funziona */

function player::finding_orientation(pos)
{   var ret;
	/* Z verticale -> 1, X orizzontale -> 1*/
	var pos_xp = pos + [1,0,0];
	var pos_xm = pos - [1,0,0];
	var pos_zp = pos + [0,0,1];
	var pos_zm = pos - [0,0,1];
	var i_l = (floor(pos_xp.z) < 0) ? 0 : floor(pos_xp.z); 
	var j_l = (floor(pos_xp.x) < 0) ? 0 : floor(pos_xp.x); 
	var i_r = (floor(pos_xm.z) < 0) ? 0 : floor(pos_xm.z); 
	var j_r = (floor(pos_xm.x) < 0) ? 0 : floor(pos_xm.x); 
	var i_u = (floor(pos_zp.z) < 0) ? 0 : floor(pos_zp.z); 
	var j_u = (floor(pos_zp.x) < 0) ? 0 : floor(pos_zp.x); 
	var i_d = (floor(pos_zm.z) < 0) ? 0 : floor(pos_zm.z); 
	var j_d = (floor(pos_zm.x) < 0) ? 0 : floor(pos_zm.x); 
	var pos_l = level_matrix[i_l][j_l];
	var pos_r = level_matrix[i_r][j_r];
	var pos_u = level_matrix[i_u][j_u];
	var pos_d = level_matrix[i_d][j_d];
	var t;
	if ((pos_l > 0) && (pos_r > 0))
	{
		t = "orizz";
		trace(t);
		ret = 0;
	}
	if ((pos_u > 0) && (pos_d > 0))
	{   t= "vert";
		trace(t);
		ret = 1;
	}
		
		
	return ret;
}

function player::warp_check()
{
	
	if (portal1 == 1 && portal2 == 1)
	{
		var p1x = int(portal1_obj.getposition().x);
		var p1z = int(portal1_obj.getposition().z);
		var p2x = int(portal2_obj.getposition().x);
		var p2z = int(portal2_obj.getposition().z);
		
		if (abs(int(oldposition.x)-p1x) <= 1 && abs(int(oldposition.z)-p1z) <= 1)
		{
			position = portal2_obj.getposition();
		}	
		else if (abs(int(oldposition.x)-p2x) <= 1 && abs(int(oldposition.z)-p2z) <= 1)
		{
			position = portal1_obj.getposition();
		}
		
	}		
}
