/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "warp_player.s3d"
#include "warp_level.s3d"
//client/server defines
#define SERVER_IP 		"192.168.43.133"
#define SERVER_PORT		50023
#define CLIENT_PORT		50024
#define CONNECTION_REQUEST	(0)
#define CONNECTION_OK			(1)
#define connection_retry 		500

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

/* Light globals */
var Light0;
var PosL = [0, 16.0, 0];	// default light position
var Light1;
var PosL1 = [0, 16.0, 43];	// default light position
var Light2;
var PosL2 = [202, 16.0, 0];	// default light position
var Light3;
var PosL3 = [202, 16, 43];	// default light position

var mylevel;

var myplayer;

var net_channel;
var players;

/* Function declarations */
function CameraMoveMouse();

function mySend(address, port, data)
{
	NetVarSendTo(address, port, data);
}

function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}

function OnInit(params)
{
	obstacle_array = array(0);
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	
	
	
	Light1 = CVmLight();
	Light1.SetPosition(PosL1);
	Light1.SetDiffuse(10, 10, 10);
	Light1.Enable();
	
	Light2 = CVmLight();
	Light2.SetPosition(PosL2);
	Light2.SetDiffuse(1, 1, 1);
	Light2.Enable();	
	
	
	Light3 = CVmLight();
	Light3.SetPosition(PosL3);
	Light3.SetDiffuse(10, 10, 10);
	Light3.Enable();

	// TODO: put your initialization code here
	mylevel = level();
	mylevel.init("level.txt");
	
	net_channel = NetCreateChannel(CLIENT_PORT, "0.0.0.0", VR_NO_BLOCKING);
	players = array(0);
	
	var connection_pdu = array(1);
	connection_pdu[0] = CONNECTION_REQUEST;
	var rcv = false;
	
	var address1 = "................";
	var lastsend = GetTime();
	var rcv_data;
	
	NetVarSendTo(SERVER_IP, SERVER_PORT, connection_pdu);
	
	do
	{
		if (GetTime() - lastsend > connection_retry)
		{
			NetVarSendTo(SERVER_IP, SERVER_PORT, connection_pdu);
			lastsend = GetTime();
		}
		rcv_data = NetVarReceiveFrom(net_channel, &address1);
		
		rcv = (rcv_data != null && rcv_data[0] == CONNECTION_OK) ?
			true : rcv;
	} while (rcv == true);
	trace(rcv_data); 
	
	myplayer = player();
	myplayer.init([1, 1, 1], rcv_data[2]);
	myplayer.setposition(rcv_data[1]);
}

function OnFrame()
{ 
	SceneBegin();
	myplayer.shot_cnt = (myplayer.shot_cnt+1)%min_shot;
	if (myplayer.has_shot && (myplayer.shot_cnt == 0))
		myplayer.has_shot = false;
	/* manage camera */
	CameraMoveMouse();

	myplayer.update();
	myplayer.mystatus.update(myplayer.position, myplayer.view, myplayer.curr_weapon, myplayer.mystatus.myWeapon.n_bullets_rg);	
	mylevel.draw();
	if (myplayer.view == 0)
	{
		myplayer.lower_obj.hide();
		myplayer.upper_obj.hide();
	}
	else
	{
		myplayer.lower_obj.unhide();
		myplayer.upper_obj.unhide();
	}
	
	myplayer.draw();
	myplayer.adding_supply();
	SceneEnd();
}

function DownloadReady(RequestID)
{
	// TODO
}

function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}


function OnExit()
{
	// TODO: put your cleanup code here
}

// Camera manager (using mouse)
function CameraMoveMouse()
{
	CameraMoveMouse_MBL_LC();
}