/******************************************************************************************************************
 *                                           |WARP_ARENA.S3D|                                                     *
 *----------------------------------------------------------------------------------------------------------------*
 * This is the arena file, and more in depth it is used to initialize the players arena, structures and acts as   *
 * client for his connection with the server. The OnInit initializes the lighting of the scene, then creates the  *
 * level by instantiating a warp_level class, and lastly asks the server for a game addition, then creating a     *
 * player with the information returned by the server.                                                            *
 * At each frame it then starts by setting the new position of the player, and then checking weather the new      *
 * position changed from the last one, and in positive case it sends a PDU to the server in order to notificate   *
 * the other players, and does the same with the angle and the weapon. It then draws the player, but firs it      *
 * checks weather he is in first person.                                                                          *
 * The OnTimer function is used to keep track of messages from the server, in order to change the position, the   *
 * weapon or other graphical effects of the players, as well as deleting him in case of need.                     *
 ******************************************************************************************************************/

/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "warp_player.s3d"
#include "warp_level.s3d"
#include "warp_enemy.s3d"
#include "warp_supplies.s3d"
//client/server defines
#define SERVER_IP 		"192.168.178.104"
#define SERVER_PORT		50023
#define CLIENT_PORT		50024

/****************************************************
 *                     |PDUs|                       *
 *--------------------------------------------------*
 *                                                  *
 * (0)CONNECTION_REQUEST: sent by a player that     *
 * wants to join a game.                            *
 *                                                  *
 * (1)CONNECTION_OK: sent by the serve once the     *
 * request is accepted.                             *
 *                                                  *
 * (2)POSITION_PDU: sent by a player once it changes*
 * his ange or his position. It is entirely sent to *
 * each other player in the game.                   *
 *                                                  *
 * (3)NEW_PLAYER: sent by the server to all players *
 * to notificate a new player has entered the arena.*
 *                                                  *
 * (4)OLD_PLAYERS: once a player has entered a game,*
 * the server informs him about the players that are*
 * already playing.                                 *
 *                                                  *
 * (5)PLAYER_EXIT: used by a player to notificate he*
 * is quitting the game.                            *
 *                                                  *
 * (6)EXIT_NOTIFICATION: used by the server to      *
 * inform all players that another one has left the *
 * game.                                            *
 *                                                  *
 * (7)CHANGE_WEAPON: sent by a client once he       *
 * changes weapon. It is sent as it is from the     *
 * server to all clients.                           *
 *                                                  *
 * (8)NEW_AMMO: a new life or ammonition box has    *
 * entered the arena!                               *
 *                                                  *
 * (9)COLLECTED_AMMO: notifies all players that the *
 * ammonition box is no more available.             *
 *                                                  *
 * (10)OLD_AMMO: passed to players when they enter  *
 * the arena. It is a vector containing all the     *
 * currently spawned boxes on the map.              *
 *                                                  *
 * (11)SHOT_PDU: notifies that a player shot a      *
 * bullet.                                          *
 *                                                  *
 * (12)BULLET_ON_WALL: notifies all players that a  *
 * bullet has hit a wall, in order to delete it.    *
 *                                                  *
 * (13)DEAD_PLAYER: notifies all players that       *
 * another one has died in order to take the proper *
 * actions.                                         *
 *                                                  *
 * (14)BULLET_ON_PERSON: when a player is hit by a  *
 * bullet, then this information must be given to   *
 * all the other players in order to let them delete*
 * the bullet.                                      *
 *                                                  *
 * (15)SERVER_BUSY: if the maximum number of players*
 * has been reached, then the connection request is *
 * discarded.                                       *
 *                                                  *
 * (16)NEW_SCORE: once a player connects to the game*
 * a new message containing his id and his score (0)*
 * is sent to everyone.                             *
 *                                                  *
 * (17)OLD_SCORES: sent by the server in order to   *
 * let new players update their score of existing   *
 * players once they connect.                       *
 *                                                  *
 * (18)KILL_SCORE: once a player dies, all the      *
 * scores must be updated, therefore the server will*
 * send the dead players id and the relative bullet *
 * in order to update correctly.                    *
 *                                                  *
 * (19) CONNECTION_ACK: sent by a client when it    *
 * successfully connects to the server. It is used  *
 * for a correct synchronization.                   *
 *                                                  *
 * (20) EXIT_ACK: sent by the server to the client. *
 * It is used to ensure a correct exit from the     *
 * game.                                            *
 *                                                  *
 * (21) RIP_PDU: Lets a player rest in peace once he*
 * dies. It waits for an ack from the server to die.*
 * This because we need to have coherent views of   *
 * the players in the game, without bugs.           *
 *                                                  *
 * (22) SERVER_OFFLINE: If the server crashes or    *
 * disconnects, all players are warned that the game*
 * is over.                                         *
 *                                                  *
 * (23) ALIVE_ACK: Sent by the clients to the server*
 * to let him know he hasn't crashed. The server has*
 * an array of timeouts. Once a players doesn't     *
 * signal his life a number of times, he is kicked. *
 ****************************************************/
#define CONNECTION_REQUEST		(0)
#define CONNECTION_OK			(1)
#define POSITION_PDU			(2)
#define NEW_PLAYER				(3)
#define OLD_PLAYERS				(4)
#define PLAYER_EXIT				(5)
#define EXIT_NOTIFICATION		(6)
#define CHANGE_WEAPON			(7)
#define NEW_AMMO				(8)
#define COLLECTED_AMMO			(9)
#define OLD_AMMO				(10)
#define SHOT_PDU				(11)
#define BULLET_ON_WALL			(12)
#define DEAD_PLAYER				(13)
#define BULLET_ON_PERSON		(14)
#define SERVER_BUSY				(15)
#define SCORES					(17)
#define KILL_SCORE				(18)
#define CONNECTION_ACK			(19)
#define EXIT_ACK				(20)
#define RIP_PDU					(21)
#define SERVER_OFFLINE			(22)
#define ALIVE_ACK				(23)
/* REPLY ACKs */
#define OK_NEW_PLAYER			(24)
#define OK_OLD_PLAYERS			(25)
#define OK_CHANGE_WEAPON		(26)
#define OK_EXIT_NOTIFICATION	(27)
#define OK_NEW_AMMO				(28)
#define OK_OLD_AMMO				(29)
#define OK_COLLECTED_AMMO		(30)
#define OK_SHOT_PDU				(31)
#define OK_BULLET_ON_WALL		(32)
#define OK_DEAD_PLAYER			(33)
#define OK_BULLET_ON_PERSON		(34)
#define OK_SCORES				(35)
#define OK_KILL_SCORE			(37)
#define OK_SERVER_OFFLINE		(38)
/* REPLY SERVER TO CLIENT */
#define OK_AMMO_STC				(39)

#define TIME_TO_ACK				500
#define connection_retry 		200

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

/* Light globals */
var Light0;
var PosL = [0, 16.0, 0];	// default light position
var Light1;
var PosL1 = [0, 16.0, 43];	// default light position
var Light2;
var PosL2 = [202, 16.0, 0];	// default light position
var Light3;
var PosL3 = [202, 16, 43];	// default light position

var mylevel;
var myenemy;
var myplayer;
var mysupply;
var mybox;
var arr_supplies;
var score_array;
//Position counter. Every 10 frames we send the position, even if it didn't change.
//var position_counter;
//Flag in order to avoid doing dead reckoning if a position packet has arrived.
//var new_position_fg;
var enemy_direction;

var net_channel;
var players;
var old_pos; //old position to check
var position; //new position to check
var old_angle; //old direction to check
var angle; //new direction to check
var old_weapon; //used to check weather the weapon has changed
var enemy_bullets;
var window;
var welcome_fx;
var last_ack_send;

var address1;
var arr;
var start_ack = false;
var cnt_new_player;
var cnt_old_player;
var cnt_change_w;
var cnt_exit_not;
var cnt_new_ammo;
var cnt_old_ammo;
var cnt_collected_ammo;
var cnt_shot;
var cnt_wall;
var cnt_dead;
var cnt_hit; // bullet on person
var cnt_old_score;
var cnt_new_score;
var cnt_kill_score;
var cnt_server_off;
var ret_back = array(1); // array for back pdu
VAR flag = false;

var cnt_ammo_stc;
/* Function declarations */
//function CameraMoveMouse();

function mySend(address, port, data)
{
	NetVarSendTo(address, port, data);
}

function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}

function OnInit(params)
{
	window = CVmWebBrowser();
	welcome_fx  = CVmVRAWAV("welcome.wav");
	obstacle_array = array(0);
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	
	
	
	Light1 = CVmLight();
	Light1.SetPosition(PosL1);
	Light1.SetDiffuse(10, 10, 10);
	Light1.Enable();
	
	Light2 = CVmLight();
	Light2.SetPosition(PosL2);
	Light2.SetDiffuse(1, 1, 1);
	Light2.Enable();	
	
	
	Light3 = CVmLight();
	Light3.SetPosition(PosL3);
	Light3.SetDiffuse(10, 10, 10);
	Light3.Enable();

	// TODO: put your initialization code here
	mylevel = level();
	mylevel.init("level.txt");
	
	net_channel = NetCreateChannel(CLIENT_PORT, "0.0.0.0", VR_NO_BLOCKING);
	players = array(0);
	
	old_weapon = 0;
	enemy_bullets = array(0);
	
	mysupply = supplies();
	mysupply.init();
	
	var connection_pdu = array(1);
	connection_pdu[0] = CONNECTION_REQUEST;
	var rcv = false;
	
	address1 = "................";
	var lastsend = GetTime();
	last_ack_send = GetTime();
	start_ack = true;
	var rcv_data;
	//position_counter = 9; //once it reaches 0 we send the position
	//new_position_fg = false;
	
	NetVarSendTo(SERVER_IP, SERVER_PORT, connection_pdu);
	//Active wait from the server. Once he asks a server to connect to the game,
	//he waits for an answer. If positive he continues, else (if the game is full),
	//he returns the message to retry later.
	while (rcv == false)
	{
		if (GetTime() - lastsend > connection_retry)
		{
			NetVarSendTo(SERVER_IP, SERVER_PORT, connection_pdu);
			lastsend = GetTime();
		}
		rcv_data = NetVarReceiveFrom(net_channel, &address1);
		
		if (rcv_data != null && rcv_data[0] == CONNECTION_OK)
			rcv = true;
			
		if (rcv_data != null && rcv_data[0] == SERVER_BUSY)
		{
			var y = "The game has started, retry later!";
			trace(y);
			window.Quit();
		}
	}
	//Now the server will wait for a confirmation message from the client.
	//This part can be done with an active wait in case of HIGH packet loss rates.
	var conn_ack = array(1);
	conn_ack[0] = CONNECTION_ACK;
	mySend(SERVER_IP, SERVER_PORT, conn_ack);
	//here we set the freshly received position information, and a 0 angle.
	old_pos = rcv_data[1];
	position = rcv_data[1];
	old_angle = 0;
	angle = 0;
	
	arr_supplies = array(0);
	score_array = array(0);
	
	myplayer = player();
	myplayer.init([1, 1, 1], rcv_data[2], mylevel.num_columns, mylevel.num_rows);
	myplayer.setposition(rcv_data[1]);
	welcome_fx.play();
	
	cnt_new_player = -1;
	cnt_old_player = -1;
	cnt_change_w = -1;
	cnt_exit_not = -1;
	cnt_new_ammo = -1;
	cnt_old_ammo = -1;
	cnt_collected_ammo = -1;
	cnt_shot = -1;
	cnt_wall = -1;
	cnt_dead = -1;
	cnt_hit = -1; // bullet on person
	cnt_old_score = -1;
	cnt_new_score = -1;
	cnt_kill_score = -1;
	cnt_server_off = -1;
	
	
	cnt_ammo_stc = 0;
	SetTimeStep(1);
}
//Here we notify the server that we are going to leave the game,
//in order to let every other player know.
function OnExit()
{
	var exit_lastsend = getTime();
	var exit_data;
	var exit_rcv = false;
	var exit_pdu = array(2);
	exit_pdu[0] = PLAYER_EXIT;
	exit_pdu[1] = myplayer.id;
	mySend(SERVER_IP, SERVER_PORT, exit_pdu);
	//the client actively waits for the disconnection ack, to
	//be extra sure everyone was noticed of this event.
	while(exit_rcv == false)
	{
		if (GetTime() - exit_lastsend > connection_retry)
		{
			NetVarSendTo(SERVER_IP, SERVER_PORT, exit_pdu);
			exit_lastsend = GetTime();
		}
		exit_data = NetVarReceiveFrom(net_channel, &address1);
		
		exit_rcv = (exit_data != null && exit_data[0] == EXIT_ACK) ?
			true : exit_rcv;
	}
}

function OnFrame()
{ 
	SceneBegin();
	//Check to be done in order to let the player shoot only every TOT seconds.
	myplayer.shot_cnt = (myplayer.shot_cnt+1)%min_shot;
	if (myplayer.has_shot && (myplayer.shot_cnt == 0))
		myplayer.has_shot = false;
	//Same check in order not to teleport continuously
	myplayer.teleport_cnt = (myplayer.teleport_cnt+1)%20;
	if (myplayer.has_teleported && (myplayer.teleport_cnt == 0))
		myplayer.has_teleported = false;
	/* manage camera */
	//CameraMoveMouse();
	//update the position of the player
	myplayer.update();
	position = myplayer.position;
	angle = myplayer.angle;
	//If one of my bullets hits a wall, we must notify everyone.
	for (var k = 0; k < len(myplayer.bullet_array); k++)
	{
		if (myplayer.bullet_array[k].hit_fg == true)
		{
			var wall_bullet = array(3);
			wall_bullet[0] = BULLET_ON_WALL;
			wall_bullet[1] = myplayer.id;
			wall_bullet[2] = myplayer.bullet_array[k].bull_id;
			mySend(SERVER_IP, SERVER_PORT, wall_bullet);
			adel(myplayer.bullet_array, k);
		}
	}
	//if I shot, I must tell everyone so they can instantiate a bullet
	if (myplayer.shot_flag == 1)
	{
		myplayer.shot_flag = 0;
		var bullet_pdu = array(3);
		bullet_pdu[0] = SHOT_PDU;
		bullet_pdu[1] = myplayer.id;
		var bullet_info = array(5);
		bullet_info[0] = myplayer.my_bullet.bull_id;
		bullet_info[1] = myplayer.my_bullet.direction;
		bullet_info[2] = myplayer.my_bullet.position;
		bullet_info[3] = myplayer.my_bullet.tipo;
		bullet_info[4] = myplayer.my_bullet.speed;
		bullet_pdu[2] = bullet_info;
		mySend(SERVER_IP, SERVER_PORT, bullet_pdu);
	}
	/*
	//This part is dead reckoning, we won't use it.
	position_counter -= 1;
	if (position_counter == 0)
	{
		position_counter = 9;
		var pos_pdu = array(5);
		pos_pdu[0] = POSITION_PDU;
		pos_pdu[1] = position;
		pos_pdu[2] = angle;
		pos_pdu[3] = myplayer.id;
		pos_pdu[4] = myplayer.current_frame;
		mySend(SERVER_IP, SERVER_PORT, pos_pdu);
		
		for (var t = 0; t < len(arr_supplies); t++)
		{
			if ( (int(position.x) == arr_supplies[t].obj.getPosition().x) &&
				(int(position.z) == arr_supplies[t].obj.getPosition().z) )
			{
				var ammo_pdu = array(3);
				ammo_pdu[0] = COLLECTED_AMMO;
				ammo_pdu[1] = myplayer.id;
				ammo_pdu[2] = t;
				mySend(SERVER_IP, SERVER_PORT, ammo_pdu);
				myplayer.mystatus.recharge(arr_supplies[t].type);
				adel(arr_supplies, t);
			}
		}
	}
	*/
	
	//I changed my position or angle from the last one this function was called.
	//I must notificate the server of this change.
	if ( (old_pos != position) || (old_angle != angle) )
	{
		var pos_pdu = array(5);
		pos_pdu[0] = POSITION_PDU;
		pos_pdu[1] = position;
		pos_pdu[2] = angle;
		pos_pdu[3] = myplayer.id;
		pos_pdu[4] = myplayer.current_frame;
		mySend(SERVER_IP, SERVER_PORT, pos_pdu);
		//here, once the position has changed, we'll check if we have collected a box.
		for (var t = 0; t < len(arr_supplies); t++)
		{
			if ( (int(position.x) == arr_supplies[t].obj.getPosition().x) &&
				(int(position.z) == arr_supplies[t].obj.getPosition().z) )
			{
				var ammo_pdu = array(4);
				ammo_pdu[0] = COLLECTED_AMMO;
				ammo_pdu[1] = myplayer.id;
				ammo_pdu[2] = t;
				ammo_pdu[3] = cnt_ammo_stc;
				flag = false;
				do
				{
					mySend(SERVER_IP, SERVER_PORT, ammo_pdu);
					var rec = NetVarReceiveFrom(net_channel, &address1);
					if ((rec != null) && (len(rec) == 1) &&(rec[0] == OK_AMMO_STC))
					flag = true;
				}while(flag != true);
				
				myplayer.mystatus.recharge(arr_supplies[t].type);
				cnt_ammo_stc += 1;
				adel(arr_supplies, t);
			}
		}
	}
	
	//I changed my weapon from the last time this function was called.
	//I must notificate the server of this change.
	if (old_weapon != myplayer.curr_weapon)
	{
		old_weapon = myplayer.curr_weapon;
		
		var weapon_pdu = array(3);
		weapon_pdu[0] = CHANGE_WEAPON;
		weapon_pdu[1] = myplayer.id;
		weapon_pdu[2] = myplayer.curr_weapon;
		mySend(SERVER_IP, SERVER_PORT, weapon_pdu);
	}
	
	old_pos = position;
	old_angle = angle;
	//here we update the user interface will all the new information.
	myplayer.mystatus.update(myplayer.position, myplayer.view, myplayer.curr_weapon, myplayer.mystatus.myWeapon.n_bullets_rg, score_array, myplayer.id);	
	mylevel.draw();
	
	//If I move my camera to first person, I'll hide the character and draw only the weapon.
	if (myplayer.view == 0)
	{
		myplayer.lower_obj.hide();
		myplayer.upper_obj.hide();
	}
	//If I go back to third person I will draw the avatar again.
	else
	{
		myplayer.lower_obj.unhide();
		myplayer.upper_obj.unhide();
	}
	
	myplayer.draw();
	var f = len(players);
	/*
	if (new_position_fg == false)
		{
			for (var k = 0; k < len(players); k++)
				{
					enemy_direction = [sin(players[k].angle), 0, cos(players[k].angle)];
					players[k].position += (enemy_direction * players[k].step * players[k].run);
				}
		}
	new_position_fg = false;
	 */
	//draw all the enemies ...
	foreach (var t in players)
		t.draw_enemy();
	// ...and all the boxes on the ground ...
	foreach (var t in arr_supplies)
		t.draw_box();
		
	// ... and all the flying bullets. Enemy_bullets contains only the enemy ones.
	foreach (var t in enemy_bullets)
	{
		t[1].position += t[1].direction * t[1].speed;
		t[1].obj.setPosition(t[1].position);
		t[1].draw_bullet();
		var p = myplayer.cylinder.iscollidingbbox(t[1].obj);
		//If I'm hit ...
		if (p == true)
		{
			var player_bullet = array(3);
			player_bullet[0] = BULLET_ON_PERSON;
			player_bullet[1] = t[0];
			player_bullet[2] = t[1].bull_id;
			mySend(SERVER_IP, SERVER_PORT, player_bullet);	
			var hit = myplayer.mystatus.bullet_damage(t[1].tipo);
			// ... and if I die ...
			if (hit == true)
			{
				// ... we notify of my death ...
				var dead_pdu = array(3);
				dead_pdu[0] = DEAD_PLAYER;
				dead_pdu[1] = myplayer.id; //giocatore morto
				dead_pdu[2] = t[0];
				mySend(SERVER_IP, SERVER_PORT, dead_pdu);
				// ... and the killer updates his score.
				var k_score = array(2);
				k_score[0] = KILL_SCORE;
				k_score[1] = t[0];
				mySend(SERVER_IP, SERVER_PORT, k_score);
				var exit_lastsend = getTime();
				var exit_max_time = exit_lastsend;
				var exit_rcv = false;
				var exit_rcv_data;
				
				while (exit_rcv == false || (getTime() - exit_max_time) > 2000)
				{
				if (GetTime() - exit_lastsend > connection_retry)
					{
						NetVarSendTo(SERVER_IP, SERVER_PORT, k_score);
						exit_lastsend = GetTime();
					}
					exit_rcv_data = NetVarReceiveFrom(net_channel, &address1);
			
					exit_rcv = (exit_rcv_data != null && exit_rcv_data[0] == RIP_PDU) ?
						true : exit_rcv;
					trace(exit_rcv);
				}
				
				OnExit();
				window.Quit();
			}
		}
	}
	SceneEnd();
}

function DownloadReady(RequestID)
{
	// TODO
}

/****************************************************
 *                    |OnTimer|                     *
 *--------------------------------------------------*
 * Called every 1ms, checks weather there are       *
 * messages sent by clients and acts accordingly:   *
 *                                                  *
 * NEW_PLAYER: a new player has entered the arena,  *
 * therefore i must add him to the structure        *
 * containing all of them, and then create an enemy *
 * object to draw on the map.                       *
 *                                                  *
 * EXIT_NOTIFICATION: a player has left the arena,  *
 * therefore we must find him in the structure and  *
 * remove him.                                      *
 *                                                  *
 * OLD_PLAYERS: sento to me from the server when I  *
 * join a game. It is a list of all the current     *
 * players in the arena, letting me start with them.*
 *                                                  *
 * POSITION_PDU: a PDU notifying me that a certain  *
 * player has moved his position or his angle. I    *
 * therefore set his position, his rotation and his *
 * current frame to correctly draw him.             *
 *                                                  *
 * CHANGE_WEAPON: notifyes me that a player changed *
 * his weapon, in order to correctly draw him.      *
 *                                                  *
 * NEW_AMMO: a new box containing life or bullets   *
 * has entered the arena. It can be collected.      *
 *                                                  *
 * OLD_AMMO: sent by the server as soon as i log on *
 * a game. It contains the existing boxes that are  *
 * currently on the ground, that spawned before I   *
 * logged on the arena.                             *
 *                                                  *
 * COLLECTED_AMMO: a player has collected an ammo,  *
 * therefore I must delete it from the structure.   *
 *                                                  *
 * SHOT_PDU: A player has shot a bullet. I must add *
 * it to the enemy_bullets array containing the id  *
 * of its player and the bullet itself, so I know   *
 * which one must be deleted.                       *
 *                                                  *
 * BULLET_ON_WALL: a bullet from another player has *
 * hit a wall. I must delete the corresponding      *
 * element from the enemy_bullets array structure.  *
 *                                                  *
 * DEAD_PLAYER: a player died. I must stop drawing  *
 * him and delete him from the structures.          *
 *                                                  *
 * BULLET_ON_PERSON: When a player is hit from a    *
 * bullet, I check weather it was present in the    *
 * enemy bullets or was one of my bullets and delete*
 * it.                                              *
 *                                                  *
 * OLD_SCORES: When I join the game, the structure  *
 * in this message contains all the scores from the *
 * players now present in the game.                 *
 *                                                  *
 * NEW_SCORE: When a player joins the game, we must *
 * add his score to the right structure.            *
 *                                                  *
 * KILL_SCORE: A player has died. I must update the *
 * scores structure in order to print it correctly. *
 *                                                  *
 * SERVER_OFFLINE: Once the server disconnects or   *
 * crashes, the interface will notify it.           *
 ****************************************************/

function OnTimer()
{
	var arr_tmp = array(0);
	
	if(start_ack)
	{
		if(GetTime() - last_ack_send >= TIME_TO_ACK)
		{
			last_ack_send = GetTime();
			var ack_pdu = array(2);
			ack_pdu[0] = ALIVE_ACK;
			ack_pdu[1] = myplayer.id;
			NetVarSendTo(SERVER_IP, SERVER_PORT, ack_pdu);
		}
	}
	
	var received_data = NetVarReceiveFrom(net_channel, &address1);
	if (received_data != null)
	{
		var enemyBull;
		var placeholder;
		switch (received_data[0])
		{
			//a new player has entered the game.
			//We must add him to the structure containing all the enemies.
			case NEW_PLAYER :
				if(cnt_new_player != received_data[5])
				{
					cnt_new_player = received_data[5];
					myenemy = enemy();
					myenemy.init(received_data[2], received_data[3], received_data[1]);
					aadd(players, myenemy);	
				} 
				ret_back[0] = OK_NEW_PLAYER;
				NetVarSendTo(SERVER_IP, SERVER_PORT, ret_back);
				break;
			//a player has left the game. We must therefore delete his
			//instance from the enemy and score structure.
	 		case EXIT_NOTIFICATION :
	 			for (var t = 0; t < len(players); t++)
					if (players[t].id == received_data[1])
						adel(players, t);
				for (var t = 0; t < len(score_array); t++)
				{
					if (score_array[t][0] == received_data[1])
						adel(score_array, t);
				}
				break;
			//sent by the server once I connect to the game. It lets me
			//obtain information of players already in the game.	
			case OLD_PLAYERS :
				if(cnt_old_player != received_data[2])
				{
					cnt_old_player = received_data[2];
					arr = received_data[1];
					foreach (var t in received_data[1])
					{
						myenemy = enemy();
						myenemy.init(t[2], t[3], t[1]);
						myenemy.switch_weapon(t[4]);
						aadd(players, myenemy);				
					}
				}
				ret_back[0] = OK_OLD_PLAYERS;
				NetVarSendTo(SERVER_IP, SERVER_PORT, ret_back);
				break;
			//a player has changed his position/angle. We must update the
			//correct enemy in order to draw him coherently.
			case POSITION_PDU :
				//new_position_fg = true;
				for (var k = 0; k < len(players); k++)
				{
					if (received_data[3] == players[k].id)
					{
						players[k].obj.setPosition(received_data[1]);
						players[k].obj.setRotation(received_data[2]*180/pi, 0, 1, 0);
						players[k].current_frame = received_data[4];
					}
				}
				break;
			//an opponent changed his weapon. We must modify the player structure
			//in order to draw him coherently.
			case CHANGE_WEAPON :
				if (cnt_change_w != received_data[3])
				{
					cnt_change_w = received_data[3];
					for (var k = 0; k < len(players); k++)
					if (received_data[1] == players[k].id)
						players[k].switch_weapon(received_data[2]);
				}
				ret_back[0] = OK_CHANGE_WEAPON;
				NetVarSendTo(SERVER_IP, SERVER_PORT, ret_back);
				break;
			//a new ammo box has spawned on the map. At first, if 3 were already on the map,
			//we delete the first one (FIFO), and then add a box.
			case NEW_AMMO :
			    if (cnt_new_ammo != received_data[2])
			    {
			    	cnt_new_ammo = received_data[2];
			    	for (var k = 0; k < len(received_data[1]); k++)
					{
						mybox = mysupply.create_supply(received_data[1][k][0], received_data[1][k][1]);
						if (mybox != null)
							aadd(arr_tmp, mybox);
					}
					arr_supplies = arr_tmp;
			    }
			    ret_back[0] = OK_NEW_AMMO;
				NetVarSendTo(SERVER_IP, SERVER_PORT, ret_back);
				break;
			//a player has collected a box, therefore I delete it from the structure.
			case COLLECTED_AMMO :
				if(cnt_collected_ammo != received_data[3])
				{
					cnt_collected_ammo = received_data[3];
					adel(arr_supplies, received_data[2]);
				}
				ret_back[0] = OK_COLLECTED_AMMO;
				NetVarSendTo(SERVER_IP, SERVER_PORT, ret_back);
				break;
			//a player has shot a bullet. We therefore create a bullet class instance and append it
			//to the structure containing all the enemy player bullets. 
			case SHOT_PDU :
				placeholder = array(2);
				placeholder[0] = received_data[1];
				enemyBull = bullet();
				enemyBull.init(received_data[2][2] - [0, 1, 0], received_data[2][1], level_matrix, 
					received_data[2][3],  received_data[2][0]);
				placeholder[1] = enemyBull;
				aadd(enemy_bullets, placeholder);
				break;
			//an enemy bullet found a wall on his trajectory, therefore we can delete it from 
			//the structure containing all the enemy bullets.
			case BULLET_ON_WALL :
				for(var k = 0; k < len(enemy_bullets); k++)
					if ( (enemy_bullets[k][0] == received_data[1]) 
						&& (enemy_bullets[k][1].bull_id == received_data[2]) )
						adel(enemy_bullets, k);
				break;
			//a player died! we must delete his instance from the 2 structures
			//that contained him: players and score_array.
			case DEAD_PLAYER :
				for (var t = 0; t < len(players); t++)
					if (players[t].id == received_data[1])
							adel(players, t);
				for (var t = 0; t < len(score_array); t++)
					if (score_array[t][0] == received_data[1])
						adel(score_array, t);
				break;
			//a bullet that had been shot caught a player! We have to remove the bullet
			//from the list of enemy bullets or ours if the bullet was shot by us.
			case BULLET_ON_PERSON :
				if (received_data[1] != myplayer.id)
				{
					for(var k = 0; k < len(enemy_bullets); k++)
						if ( (enemy_bullets[k][0] == received_data[1]) 
							&& (enemy_bullets[k][1].bull_id == received_data[2]) )
							adel(enemy_bullets, k);
				}
				else
					for(var k = 0; k < len(myplayer.bullet_array); k++)
						if ( myplayer.bullet_array[k].bull_id == received_data[2] )
							adel(myplayer.bullet_array, k);
				break;
			//as soon as I connect to the server, he sends us the scores of the players
			//that were already in the game.
			case SCORES :
				if(cnt_old_score != received_data[2])
				{
					cnt_old_score = received_data[2];
					score_array = received_data[1];
				}
				ret_back[0] = OK_SCORES;
				NetVarSendTo(SERVER_IP, SERVER_PORT, ret_back);
				break;
			//when a new player enteres the arena, we have to add a score instance to 
			//the appropriate structure.
			//when a player dies we must update the score of the player
			//whos bullet was.
			case KILL_SCORE :
				for (var t = 0; t < len(score_array); t++)
					if (score_array[t][0] == received_data[1])
						score_array[t][1] += 1;
				break;
			//if the server disconnects or crashes, an appropriate
			//message will be shown to each client.
			case SERVER_OFFLINE :
				myplayer.mystatus.server_offline_fun();
				break;
				
			default :
		}
	}
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}

// Camera manager (using mouse)
function CameraMoveMouse()
{
	CameraMoveMouse_MBL_LC();
}