/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;


// TODO: put your global variables here


/* Camera globals */
var CamPos = [0.0, 5.0, 30.0]; 	// camera position

/* Light globals */
var Light0;
var PosL = [16.0, 16.0, 16.0];	// default light position


class level
{
	var wall_mesh;
	var wall_obj_array;
	var floor_mesh;
	var wall_material;
	var wall_texture;
	var floor_material;
	var floor_texture;
	init(level_textfile);
	draw();		
};


function level::init(level_textfile)
{
	wall_texture = CVmTexture("mattoni03.png");
	wall_material = CVmMaterial();
	wall_material.SetTexture(wall_texture);
	wall_material.ChangeTextureParams(VR_V_TILING, 3);
	
	wall_obj_array = array(0);
	wall_mesh = CVmNewMesh(VRP_BOX);
	wall_mesh.SetMaterial(wall_material);
	wall_mesh.Scale(1,3,1);
	var f = LoadFile(level_textfile);
	trace(f);
	var num_rows = len(f);
	var num_columns = len(f[0]);
	trace(num_rows,num_columns);
	for(var i=0; i< num_rows; i++)
	{
		for(var j=0; j< num_columns; j++)
		{
			if (f[i][j] == "*")
			{
				var t = CVmObj(wall_mesh);
				t.SetPosition(j,0,i);
				aadd(wall_obj_array,t);
			}			
		}
	}	
	
	floor_material = CVmMaterial();
	floor_texture  = CVMtexture("marmo.png");
	floor_material.SetTexture(floor_texture);
	floor_material.ChangeTextureParams(VR_U_TILING,4);
	floor_material.ChangeTextureParams(VR_V_TILING,4);
	
	
	floor_mesh = CVmNewMesh(VRP_BOX);
	floor_mesh.scale(num_columns,1,num_rows);
	floor_mesh.translate(0,-1,0);
	floor_mesh.SetMaterial(floor_material);
	floor_mesh.ModulateMaterials(0,1,0,1);	
}


function level::draw()
{
	foreach (var t in wall_obj_array)
		t.Draw();
	floor_mesh.draw();
}


var mylevel;


class player
{
	var lower_mesh;
	var upper_mesh;
	var lower_obj;
	var upper_obj;
	var weapon_mesh;
	var weapon_obj;	 
	var obj;
	var position;
	var angle;
	var direction;
	var step;
	
	init();
	draw();
	setposition(pos);
	update();
};

function player::setposition(pos)
{
	position = pos;
	obj.setposition(position);
}

function player::init()
{
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf1 = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf1);
	weapon_mesh = CVMNewMesh("rocketl.aam");
	weapon_mesh.scale(sf1);
	
	lower_obj = CVmObj(lower_mesh);
	upper_obj = CVmObj(upper_mesh);
	weapon_obj = CVMObj(weapon_mesh);
	obj = CVmObj();
	obj.addchild(upper_obj);
	obj.addchild(lower_obj);
	obj.addchild(weapon_obj);
	
	angle = 0;
	direction = [0,0,1];
	step = 0.1;
}

function player::update()
{
	if (keypressed(VK_UP))
		position += (direction*step);
	else if (keypressed(VK_DOWN))
		position -= (direction*step);	
		
	setposition(position);		
}




function player::draw()
{
	obj.draw(VR_FRAMENUMBER,0);
}

var myplayer;

/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);



function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}



function OnInit(params)
{
	
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	

	// TODO: put your initialization code here
	mylevel = level();
	mylevel.init("level.txt");
	
	
	myplayer = player();
	myplayer.init();
	myplayer.setposition([2,0,2]);
}




function OnFrame()
{
	/* manage camera */
	CameraMoveMouse();
	
	myplayer.update();
	
	SceneBegin();	
	DrawGrid([0.5, 0.5, 0.5], 100);
	mylevel.draw();
	myplayer.draw();
	SceneEnd();
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}


function OnExit()
{
	// TODO: put your cleanup code here
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
