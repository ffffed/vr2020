/* Include s3d symbols */
#include <Script3d.h>
#include <Camera.s3d.h>
#include "warp_player.s3d"

/* Set global scene parameters */
SET SCENE_FOV  = 60;
SET SCENE_NEAR = 0.5;
SET SCENE_FAR  = 1000;

/* Light globals */
var Light0;
var PosL = [16.0, 16.0, 16.0];	// default light position
var Light1;
var PosL1 = [1, 0, 1];	// default light position

class level
{
	var wall_mesh;
	var box_mesh;
	var wall_obj_array;
	var box_obj_array;
	var floor_mesh;
	var wall_material;
	var box_material;
	var wall_texture;
	var box_texture;
	var floor_material;
	var floor_texture;

	
	init(level_textfile);
	draw();		
};


function level::init(level_textfile)
{
	wall_texture = CVmTexture("mattoni03.png");
	wall_material = CVmMaterial();
	wall_material.SetTexture(wall_texture);
	wall_material.ChangeTextureParams(VR_V_TILING, 3);
	
	box_texture = CVmTexture("ruggine01.jpg");
	box_material = CVmMaterial();
	box_material.SetTexture(box_texture);
	box_material.ChangeTextureParams(VR_V_TILING, 1);
	
	
	
	wall_obj_array = array(0);
	wall_mesh = CVmNewMesh(VRP_BOX);
	wall_mesh.SetMaterial(wall_material);
	wall_mesh.Scale(1, 3, 1);
	
	box_obj_array = array(0);
	box_mesh = CVmNewMesh(VRP_BOX);
	box_mesh.SetMaterial(box_material);
	box_mesh.Scale(1, 1, 1);
	//box_mesh.ModulateMaterials(1, 0, 0);
	
	var f = LoadFile(level_textfile);
	trace(f); // = printf
	var num_rows = len(f);
	var num_columns = len(f[0]);
	level_matrix = array(num_rows);
	trace(num_rows,num_columns);
	// crea la mappa a partire dalla matrice di *
	for(var i=0; i< num_rows; i++)
	{
		level_matrix[i] = array(num_columns);
		for(var j=0; j< num_columns; j++)
		{
			if (f[i][j] == "*")
			{
				level_matrix[i][j] = 3;
				var t = CVmObj(wall_mesh);
				t.SetPosition(j,0,i);
				aadd(wall_obj_array,t);
			}	
			else if (f[i][j] == "@")
			{
				level_matrix[i][j] = 1;
				var t = CVmObj(box_mesh);
				t.SetPosition(j,0,i);
				aadd(box_obj_array,t);
			}
			
			else			
				level_matrix[i][j] = 0;
			
		}
	}
	
	floor_material = CVmMaterial();
	floor_texture  = CVMtexture("marmo.png");
	floor_material.SetTexture(floor_texture);
	floor_material.ChangeTextureParams(VR_U_TILING,4);
	floor_material.ChangeTextureParams(VR_V_TILING,4);
	
	
	floor_mesh = CVmNewMesh(VRP_BOX);
	floor_mesh.scale(num_columns,1,num_rows);
	floor_mesh.translate(0,-1,0);
	floor_mesh.SetMaterial(floor_material);
	floor_mesh.ModulateMaterials(0,1,0,1);	
}


function level::draw()
{
	foreach (var t in wall_obj_array)
		t.Draw();
	foreach (var t in box_obj_array)
		t.Draw();
	floor_mesh.draw();
}


var mylevel;

var myplayer;
var mystatus;

/* Function declarations */
function CameraMoveMouse();
function DrawGrid(col, size);

function OnDownload()
{
	// TODO: download your resources here
	// E.g.: FileDownload("resource.ext");
	FileDownload("XVRResources.zip");
}



function OnInit(params)
{
	
	/* initialize camera */
	CameraGetCurrent().SetPosition(CamPos);

	/* initialize light */
	Light0 = CVmLight();
	Light0.SetPosition(PosL);
	Light0.SetDiffuse(1, 1, 1);
	Light0.Enable();	
	
	
	Light1 = CVmLight();
	Light1.SetPosition(PosL);
	Light1.SetDiffuse(10, 10, 10);
	Light1.Enable();	

	// TODO: put your initialization code here
	mylevel = level();
	mylevel.init("level.txt");
	
	
	myplayer = player();
	myplayer.init([1, 1, 1]);
	myplayer.setposition([myPosX, myPosY, myPosZ]);
	
	mystatus = status();
	mystatus.init();
}




function OnFrame()
{ 
	myplayer.shot_cnt = (myplayer.shot_cnt+1)%min_shot;
	if (myplayer.has_shot && (myplayer.shot_cnt == 0))
		myplayer.has_shot = false;
	/* manage camera */
	CameraMoveMouse();
	myplayer.update();
	mystatus.update();
	
	SceneBegin();	
	DrawGrid([0.5, 0.5, 0.5], 100);
	mylevel.draw();
	myplayer.draw();
	SceneEnd();
}



function DownloadReady(RequestID)
{
	// TODO
}



function OnTimer()
{
	// TODO:
}


function OnEvent(eventID, wparam, lparam){
	// TODO: put your events handling code here
}

function OnError(){
	// TODO: put your errors handling code here
}


function OnExit()
{
	// TODO: put your cleanup code here
}



// Camera manager (using mouse)
function CameraMoveMouse()
{	

	CameraMoveMouse_MBL_LC();

}



function DrawGrid(col, size)
{
	/* let's not mess up current OpenGL status */
	glPushAttrib(GL_LIGHTING_BIT | GL_LINE_BIT | GL_CURRENT_BIT);
	
	glLineWidth(1);
	glDisable(GL_LIGHTING);
	glColor(col);
	var max = size / 2.0;
	var min = -max;	
	var step = size / 10.0;
	
	glBegin(GL_LINES);
		for (var i = min; i <= max; i += step)
		{
			glVertex(i, 0, max);
			glVertex(i, 0, min);
			
			glVertex(max, 0, i);
			glVertex(min, 0, i);
		}
	glEnd();
	
	/* polite restoration of previous OpenGL status */
	glPopAttrib();
}
