#include "warp_bullet.s3d"
#include "warp_status.s3d"

//frame di movimento
#define SWAT_START_WALK 16
#define SWAT_END_WALK   48
//PLayer position spawn
#define myPosX 19
#define myPosY 0
#define myPosZ 4
//distance between player and camera
#define distance	2
#define altitude 1.7

var mirino = "°";
var level_matrix;
//position of the camera
var CamPos;
var i;
var J;
var i_new;
var j_new; // Variabili placeholder per la posizione
class player
{
	var myCamera;
	var myMouse;
	var lower_mesh;
	var angle; //initial player direction
	var view; //1=third person, 0=first person
	var upper_mesh;
	var lower_obj;
	var upper_obj;
	var weapon_mesh;
	var weapon_obj;	 
	var obj;
	var position;
	var direction;
	var step;
	var frame_step;
	var current_frame;
	var run;
	var my_bullet;
	var bullet_array;
	var shot_cnt;
	var has_shot;
	var color;
	var shoot_fx;
	var step_fx;
	var j_up;
	var j_down;
	var j_count;
	var J_finalPos;
		
	init(col);
	draw();
	setposition(pos);
	setrotation(angle);
	update();
};

function player::init(col)
{
	bullet_array = array(0);
	shot_cnt = 0;
	has_shot = false;
	angle = 0;
	view = 1;
	color = col;
	j_up = 0;
	j_down = 0;
	j_count = 0;
	lower_mesh = CVmNewMesh("swat_lower.aam");
	var sf1 = lower_mesh.normalize(1);
	upper_mesh = CVmNewMesh("swat_upper.aam");
	upper_mesh.scale(sf1);
	weapon_mesh = CVMNewMesh("rocketl.aam");
	weapon_mesh.scale(sf1);
	
	myMouse = CVmMouse();
	lower_obj = CVmObj(lower_mesh);
	upper_obj = CVmObj(upper_mesh);
	weapon_obj = CVMObj(weapon_mesh);
	obj = CVmObj();
	obj.addchild(upper_obj);
	obj.addchild(lower_obj);
	obj.addchild(weapon_obj);
	
	obj.ModulateMaterials(color);
	
	angle = 0;
	direction = [0,0,1];
	step = 0.1;
	frame_step = 1.0;
	current_frame = SWAT_START_WALK;
	run = 1;
	
	shoot_fx = CVmVRAWAV("shoot.wav");
	step_fx  = CVmVRAWAV("step.wav");
}

function player::update()
{
	var oldposition = position;
	var oldCamPos = CamPos;
	
	
	/*
	 * Qui c'è il codice per la mappatura dei vari tasti
	 * 
	 */
	 
	 // Corsa
	if (keypressed(VK_SHIFT))
		run = 2;
	else
		run = 1;
	
	// Turn left
	if (keypressed("A"))
		angle += 0.02;
	// Turn right	
	else if (keypressed("D"))
		angle -= 0.02;
	
	direction = [sin(angle), 0, cos(angle)];
	
	// Jump
	if (keypressed(VK_SPACE))
	{
		if(j_up == 0 && j_down == 0)
		{
			j_up = 1;
			j_count = 0;
		}
	}
	if(j_up == 1)
	{
		position.y +=  0.1;
		j_count += 0.1;
		if (j_count >= 1.5)
		{
			j_up = 0;
			j_down = 1;
		}
	}
	else if (j_down == 1)
	{
	   i = int(position.z);
	   j = int(position.x);
	   j_finalPos = level_matrix[i][j];
	   // Se la posizione finale è più bassa della posizione in cui devo stare
	   // allora devo piallare tutto alla posizione finale.
		if (position.y <= j_finalPos)
		{
			j_down = 0;
			position.y = j_finalPos;
			j_count = 0;
		}
		else 
		{
			// Devo stare attento che non vada in negativo.
			// I controlli non sono mai troppi, mannaggia la madonna
			position.y -= 0.1;
			if (position.y < 0)
			{
			 position.y = j_finalPos;
			}
			
		}
			
	}
	// Forward walk
	if (keypressed("W"))
	{	
		
		i = int(position.z);
		j = int(position.x);
		position += (direction*step*run);
		i_new = int(position.z);
		j_new = int(position.x);
		// Se vado verso una zona più bassa, allora devo scendere
		if (level_matrix[i_new][j_new] < level_matrix[i][j]){
			j_down = 1;
		}
		CamPos += (direction*step*run);
		current_frame += frame_step;
		if (current_frame > SWAT_END_WALK)
		{
			step_fx.play();
			current_frame = SWAT_START_WALK;
		}
	}
	// Backword Walk
	else if (keypressed("S"))
	{  
		i = int(position.z);
		j = int(position.x);
		position -= (direction*step*run);
		i_new = int(position.z);
		j_new = int(position.x);
		// Se vado verso una zona più bassa, allora devo scendere
		if (level_matrix[i_new][j_new] < level_matrix[i][j]){
			j_down = 1;
		}
		CamPos -= (direction*step*run);
		current_frame -= frame_step;
		if (current_frame < SWAT_START_WALK)
		{
			current_frame = SWAT_END_WALK;
		}
	}
	
	// E for first person, F to go back to third person
	if (keypressed("E"))
		view = 0;

	if (keypressed("F"))
		view = 1;
		
	 i = int(position.z);
	 j = int(position.x);
	var inside = level_matrix[i][j];
	
	// Se sto andando in una casella la cui altezza supera l'altezza dove sono + il salto rimasto
	// Allora non devo entrare
    if ((inside) > (j_count+position.y))
	{
		position = oldposition;
		CamPos = oldCamPos;
	}
	setrotation(angle);
	setposition(position);
	CameraGetCurrent().SetPosition(CamPos);
	
	/*
	 * Per lo sparo bisogna creare un array di istanze, una per ogni bullet.
	 * Per ogni proiettile, bisogna tenerne traccia, mediante l'istanza dell'oggetto che gli compete.
	 */
 	if (keypressed("I"))
	{
		//trace(position,direction);
		if (!has_shot) 
		{
			my_bullet = bullet();
			my_bullet.init(position, direction);
			aadd(bullet_array, my_bullet);
			var x = len(bullet_array);
			trace(x);
			shoot_fx.play();
			has_shot = true;
		}
		
	} 

	for(var k = 0; k < len(bullet_array); k++)
		bullet_array[k].update();


	//updates camera focal point
	CameraGetCurrent().SetTarget(position.x+sin(angle)*(distance+3), position.y+(1-view)*2, position.z+cos(angle)*(distance+3));
	
}

function player::draw()
{
	obj.draw(VR_FRAMENUMBER, current_frame);
	for(var k = 0; k < len(bullet_array); k++)
	{
		bullet_array[k].draw();
	}
}

function player::setposition(pos)
{
	position = pos;
	obj.setposition(position); //sets players position
}

function player::setrotation(angle)
{
	obj.setrotation(angle*180.0/PI, 0, 1, 0);
	//rotates camera(depending also on the view)
	CamPos = [position.x+sin(-angle)*distance*view+(1-view)*sin(-angle)*0.5, position.y+altitude-(1-view)*-0.2, position.z-distance*cos(angle)*view-(1-view)*cos(angle)*0.5]; 
}

